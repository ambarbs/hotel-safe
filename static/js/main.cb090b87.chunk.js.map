{"version":3,"sources":["Components/App/App.Styles.js","Components/Locker/KeyPad/KeyPad.Styles.js","Components/Locker/KeyPad/KeyPad.js","Components/Locker/DisplayPanel/DisplayPanel.Styles.js","Components/Locker/DisplayPanel/DisplayPanel.js","Components/Locker/Locker.Styles.js","Components/Locker/Locker.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["AppWrapper","styled","div","RightItemsWrapper","KeyPadGrid","KeyWrapper","keys","direction","KeyPad","setCurrentInput","currentInput","setLockerPIN","lockerPIN","setLocked","locked","handleCLick","key","substr","length","handleKeyPress","event","includes","useEffect","window","addEventListener","removeEventListener","onKeyDown","map","onClick","defaultProps","DisplayPanelWrapper","Indicator","bgColor","DisplayPanel","split","i","index","LockerWrapper","Locker","useState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yzBAEO,IAAMA,EAAaC,IAAOC,IAAV,KASVC,EAAoBF,IAAOC,IAAV,K,ssBCTvB,IAAME,EAAaH,IAAOC,IAAV,KAWVG,EAAaJ,IAAOC,IAAV,KCRVI,GDkBgBL,IAAOC,IAAV,KAEN,qBAAGK,WAA6B,SCpBhC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAO,IAAK,WAEjEC,EAAS,SAAC,GAEhB,IADLC,EACI,EADJA,gBAAiBC,EACb,EADaA,aAAcC,EAC3B,EAD2BA,aAAcC,EACzC,EADyCA,UAAWC,EACpD,EADoDA,UAAWC,EAC/D,EAD+DA,OAE7DC,EAAc,SAACC,GACP,QAARA,EAIQ,WAARA,EAeJP,EAAgB,UAAGC,GAAH,OAAkBM,GAAMC,QAAQ,IAd1CH,EAEEF,IAAcF,GAChBC,EAAa,IACbE,GAAU,IAEVJ,EAAgB,WAERK,GAAkC,IAAxBJ,EAAaQ,SACjCP,EAAaD,GACbG,GAAU,IAdZJ,EAAgB,KAqBdU,EAAiB,SAACC,GAClBd,EAAKe,SAASD,EAAMJ,KACtBD,EAAYK,EAAMJ,KACK,UAAdI,EAAMJ,IACfD,EAAY,UACW,cAAdK,EAAMJ,KACfD,EAAY,QAShB,OALAO,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWL,GAC5B,kBAAMI,OAAOE,oBAAoB,UAAWN,MAClD,CAACA,IAGF,cAACf,EAAD,CACEsB,UAAWP,EADb,SAGGb,EAAKqB,KAAI,SAACX,GAAD,OACR,cAACX,EAAD,CAEEuB,QAAS,WACPb,EAAYC,IAHhB,SAMGA,GALIA,S,82BAqBfR,EAAOqB,aAAe,CACpBpB,gBAAiB,aACjBE,aAAc,aACdE,UAAW,cC5EN,IAAMiB,EAAsB7B,IAAOC,IAAV,KAyBnB6B,GAPiB9B,IAAOC,IAAV,KAOFD,IAAOC,IAAV,KAKA,qBAAG8B,YC7BZC,EAAe,SAAC,GAAD,IAAGvB,EAAH,EAAGA,aAAH,OAC1B,cAACoB,EAAD,UACGpB,EAAawB,MAAM,IAAIP,KAAI,SAACQ,EAAGC,GAAJ,OAAc,+BAA6BD,GAA7B,UAAcA,EAAd,YAAmBC,U,4PCH1D,IAAMC,EAAgBpC,IAAOC,IAAV,KCKnB,SAASoC,IAAU,IAAD,EACiBC,mBAAS,IAD1B,mBAChB7B,EADgB,KACFD,EADE,OAEW8B,mBAAS,IAFpB,mBAEhB3B,EAFgB,KAELD,EAFK,OAGK4B,oBAAS,GAHd,mBAGhBzB,EAHgB,KAGRD,EAHQ,KAKvB,OACE,eAACwB,EAAD,WACE,cAAC,EAAD,CACE5B,gBAAiBA,EACjBC,aAAcA,EACdC,aAAcA,EACdC,UAAWA,EACXC,UAAWA,EACXC,OAAQA,IAEV,eAACX,EAAD,WACE,cAAC,EAAD,CAAcO,aAAcA,IAC5B,cAACqB,EAAD,CAAWC,QAASlB,EAAS,MAAQ,gBCX9B0B,MARf,WACE,OACE,cAACxC,EAAD,UACE,cAACsC,EAAD,OCQSG,EAhBS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAIpB,IAFFC,EAEC,EAFDA,OAAQC,EAEP,EAFOA,OAAQC,EAEf,EAFeA,OAAQC,EAEvB,EAFuBA,OAAQC,EAE/B,EAF+BA,QAGlCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb090b87.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  background-color: #293F55;\n`;\n\nexport const RightItemsWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-direction: column;\n  flex-basis: 50%;\n  width: 100%;\n  padding-top: 1.5rem;\n  margin-left: 2rem;\n\n  @media only screen and (max-width: 576px) {\n    flex-basis: unset;\n    padding-left: unset;\n    width: unset;\n    height: 15vh;\n    margin-left: unset;\n`;\n","import styled from 'styled-components';\n\nexport const KeyPadGrid = styled.div`\n  flex-basis: 40%;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, 1fr);\n  grid-gap: 0.4rem;\n  background-color: #666666;\n  border: #666666 1.5rem solid;\n  outline: .5rem solid black;\n`;\n\nexport const KeyWrapper = styled.div`\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.75rem;\n  font-weight: 500;\n  cursor: pointer;\n`;\n\nexport const KeyPadWrapper = styled.div`\n  display: flex;\n  flex-direction: ${({ direction }) => direction || 'row'};\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { KeyPadGrid, KeyWrapper } from './KeyPad.Styles';\n\nexport const keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'CLR', '0', '⇨'];\n\nexport const KeyPad = ({\n  setCurrentInput, currentInput, setLockerPIN, lockerPIN, setLocked, locked,\n}) => {\n  const handleCLick = (key) => {\n    if (key === 'CLR') {\n      setCurrentInput('');\n      return;\n    }\n    if (key === '⇨') {\n      if (locked) {\n        // PIN matches\n        if (lockerPIN === currentInput) {\n          setLockerPIN('');\n          setLocked(false);\n        } else { // Invalid PIN\n          setCurrentInput('INVALID');\n        }\n      } else if (!locked && currentInput.length === 4) {\n        setLockerPIN(currentInput);\n        setLocked(true);\n      }\n      return;\n    }\n    setCurrentInput(`${currentInput}${key}`.substr(-4));\n  };\n\n  const handleKeyPress = (event) => {\n    if (keys.includes(event.key)) {\n      handleCLick(event.key);\n    } else if (event.key === 'Enter') {\n      handleCLick('⇨');\n    } else if (event.key === 'Backspace') {\n      handleCLick('CLR');\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  return (\n    <KeyPadGrid\n      onKeyDown={handleKeyPress}\n    >\n      {keys.map((key) => (\n        <KeyWrapper\n          key={key}\n          onClick={() => {\n            handleCLick(key);\n          }}\n        >\n          {key}\n        </KeyWrapper>\n      ))}\n    </KeyPadGrid>\n  );\n};\n\nKeyPad.propTypes = {\n  currentInput: PropTypes.string.isRequired,\n  lockerPIN: PropTypes.string.isRequired,\n  setCurrentInput: PropTypes.func,\n  setLockerPIN: PropTypes.func,\n  setLocked: PropTypes.func,\n  locked: PropTypes.bool.isRequired,\n};\n\nKeyPad.defaultProps = {\n  setCurrentInput: () => {},\n  setLockerPIN: () => {},\n  setLocked: () => {},\n};\n","import styled from 'styled-components';\n\nexport const DisplayPanelWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  background-color: #9EA18B;\n  border-radius: 1rem;\n  border: black solid 0.5rem;\n  width: 100%;\n  height: 35%;\n  margin-bottom: 6rem;\n  font-size: 4rem;\n\n  @media only screen and (max-width: 576px) {\n    margin-bottom: 1rem;\n    height: 100%;\n  }\n`;\n\nexport const DisplayWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Indicator = styled.div`\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  border: black 0.25rem solid;\n  background-color: ${({ bgColor }) => bgColor};\n  transition: background-color 500ms ease-out;\n  @media only screen and (max-width: 576px) {\n    width: 2rem;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { DisplayPanelWrapper } from './DisplayPanel.Styles';\n\nexport const DisplayPanel = ({ currentInput }) => (\n  <DisplayPanelWrapper>\n    {currentInput.split('').map((i, index) => <span key={`${i}-${index}`}>{i}</span>)}\n  </DisplayPanelWrapper>\n);\n\nDisplayPanel.propTypes = {\n  currentInput: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const LockerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 90vw;\n  height: 30vw;\n\n  @media only screen and (max-width: 576px) {\n    flex-direction: column;\n    height: 95vh;\n  }\n`;\n","import React, { useState } from 'react';\nimport { KeyPad } from './KeyPad/KeyPad';\nimport { RightItemsWrapper } from '../App/App.Styles';\nimport { DisplayPanel } from './DisplayPanel/DisplayPanel';\nimport { Indicator } from './DisplayPanel/DisplayPanel.Styles';\nimport { LockerWrapper } from './Locker.Styles';\n\nexport function Locker() {\n  const [currentInput, setCurrentInput] = useState('');\n  const [lockerPIN, setLockerPIN] = useState('');\n  const [locked, setLocked] = useState(false);\n\n  return (\n    <LockerWrapper>\n      <KeyPad\n        setCurrentInput={setCurrentInput}\n        currentInput={currentInput}\n        setLockerPIN={setLockerPIN}\n        lockerPIN={lockerPIN}\n        setLocked={setLocked}\n        locked={locked}\n      />\n      <RightItemsWrapper>\n        <DisplayPanel currentInput={currentInput} />\n        <Indicator bgColor={locked ? 'red' : 'green'} />\n      </RightItemsWrapper>\n    </LockerWrapper>\n  );\n}\n","import React from 'react';\nimport { AppWrapper } from './App.Styles';\n\nimport { Locker } from '../Locker/Locker';\n\nfunction App() {\n  return (\n    <AppWrapper>\n      <Locker />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then((\n      {\n        getCLS, getFID, getFCP, getLCP, getTTFB,\n      },\n    ) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}